<?php

/**
 * VSharedData - PocketMine plugin.
 * Copyright (C) 2023 - 2025 VennDev
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

declare(strict_types = 1);

namespace vennv\vvanillamobs\entity\types;

use pocketmine\block\VanillaBlocks;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\entity\Entity;
use pocketmine\math\AxisAlignedBB;
use pocketmine\math\Vector3;
use pocketmine\player\Player;
use vennv\vvanillamobs\entity\GroundCritter;
use vennv\vvanillamobs\utils\ai\AI;
use vennv\vvanillamobs\utils\astar\AStar;
use vennv\vvanillamobs\utils\astar\Node;
use vennv\vapm\Promise;
use Throwable;

class GroundMonster extends GroundCritter {

	private ?Entity $target = null;

	private ?Promise $finding = null;

	private int $knockBackTicks = 0;

	public float $radiusAttack = 1.0;

	public float $damageAttack = 1.0;

	public float $knockBackAttack = 0.4;

	public bool $isCollided = true;

	public bool $isCollidedHorizontally = true;

	public bool $isCollidedVertically = true;

	public bool $canClimb = true;

	public bool $canAttack = true;

	public function __construct($location, ?CompoundTag $nbt = null) {
		parent::__construct($location, $nbt);
	}

	public function getName() : string {
		return "GroundMonster";
	}

	public function getDrops() : array {
		return [];
	}

	public static function getNetworkTypeId() : string {
		return "GroundMonster";
	}

	public function getDistanceSearch() : Vector3 {
		return new Vector3(16, 16, 16);
	}

	public function getTarget() : ?Entity {
		return $this->target;
	}

	public function setTarget(?Entity $target) : void {
		$this->target = $target;
	}

	public function getPriorityEntities() : array {
		return [
			Player::class
		];
	}

	protected function getBlocksNotPassable() : array {
		return [
			VanillaBlocks::LAVA()
		];
	}

	private function onMove(Vector3 $to, Vector3 $from) : void {
		if (!$this->isAlive()) {
			return;
		}

		if ($this->knockBackTicks > 0) {
			return;
		}

		$dx = $to->getX() - $from->getX();
		$dz = $to->getZ() - $from->getZ();

		$diff = abs($dx) + abs($dz);

		if ($diff == 0) {
			return;
		}

		$this->motion->x = $this->getMovementSpeed() * $dx / $diff;
		$this->motion->z = $this->getMovementSpeed() * $dz / $diff;

		$vector3 = new Vector3($this->motion->x, $this->motion->y, $this->motion->z);

		if (!AI::canPass($this, $vector3, $this->getBlocksNotPassable())) {
			return;
		}

		$this->move($this->motion->x, $this->motion->y, $this->motion->z);
	}

	public function attack(EntityDamageEvent $source) : void {
		$this->knockBackTicks = 5;
		parent::attack($source); // TODO: Change the autogenerated stub
	}

	/**
	 * @throws Throwable
	 */
	public function onUpdate(int $currentTick = 1) : bool {
		if ($this->knockBackTicks > 0) {
			$this->knockBackTicks--;
			return parent::onUpdate($currentTick);
		}

		$entities = $this->getWorld()->getNearbyEntities($this->getAxisAlignedBB(), $this);

		foreach ($entities as $entity) {
			foreach ($this->getPriorityEntities() as $priorityEntity) {
				if ($entity instanceof $priorityEntity && $this->getTarget() === null) {
					$this->setTarget($entity);
					break;
				}
			}
		}

		if ($this->getTarget() !== null && $this->canAttack) {
			$locationTarget = $this->getTarget()->getLocation();
			$locationEntity = $this->getLocation();

			$distance = $locationEntity->asVector3()->distance($locationTarget->asVector3());

			if ($distance <= $this->radiusAttack) {
				$this->getTarget()->attack(new EntityDamageByEntityEvent($this, $this->getTarget(), EntityDamageEvent::CAUSE_ENTITY_ATTACK, $this->damageAttack, [], $this->knockBackAttack));
			}
		}

		if ($this->getTarget() !== null && $this->getTarget()->isAlive() && !$this->getTarget()->isClosed()) {
			$locationTarget = $this->getTarget()->getLocation();
			$locationEntity = $this->getLocation();

			$distance = $locationEntity->asVector3()->distance($locationTarget->asVector3());

			if ($distance < $this->getDistanceSearch()->getX()) {
				$this->lookAt($locationTarget->asVector3());

				$dx = $locationTarget->getX() - $locationEntity->getX();
				$dz = $locationTarget->getZ() - $locationEntity->getZ();

				$diff = abs($dx) + abs($dz);

				if ($diff > 0.1) {
					$goto = new AStar(
						[
							$locationEntity->getX(),
							$locationEntity->getZ()
						],
						[
							$locationTarget->getX(),
							$locationTarget->getZ()
						],
						$this->getWorld(),
						$locationTarget->getY(),
						$this->getBlocksNotPassable()
					);

					if ($this->finding === null) {
						$goto->find()->then(function (array $path) : void {
							$this->finding = new Promise(function ($resolve) use ($path) {
								foreach ($path as $node) {
									/** @var Node $node */
									$this->onMove(new Vector3($node->x, $this->motion->y, $node->z), $this->getLocation());
								}
								$resolve();
							});
							$this->finding->then(function () : void {
								$this->finding = null;
							});
						})->catch(function () : void {
							$this->setTarget(null);
							$this->finding = null;
						});
					}
				}
			} else {
				$this->setTarget(null);
			}
		} else {
			$this->setTarget(null);
		}

		return parent::onUpdate($currentTick);
	}

	private function getAxisAlignedBB() : AxisAlignedBB {
		$distance = $this->getDistanceSearch();

		return $this->getBoundingBox()->expandedCopy(
			$distance->getX(), $distance->getY(), $distance->getZ()
		);
	}

}